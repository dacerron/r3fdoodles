{"version":3,"sources":["Components/Controls.js","Components/AnimatedSpheres.js","Components/Sphere.js","Components/Plane.js","Components/Scene.jsx","Components/About.jsx","Components/Projects.jsx","App.js","index.js"],"names":["extend","OrbitControls","spheres","i","Math","floor","color","THREE","random","push","position","key","start","AnimatedSphere","animated","zPositionOffset","menuFunction","index","shouldRise","useState","rise","setRise","tempVector","useSpringRef","props","useSpring","yposition","config","duration","sphereRef","useRef","useFrame","current","z","getWorldPosition","console","log","useEffect","mesh","ref","onPointerDown","attach","meshPhysicalMaterial","AnimatedSpheres","menuFunctions","riseValues","React","useContext","SphereContext","map","sphere","length","values","Plane","Reflector","resolution","args","mirror","mixStrength","rotation","PI","Material","metalness","normalScale","Scene","group","rotationEuler","rotationQuaternion","viewport","useThree","mouse","x","width","y","height","set","setFromEuler","quaternion","slerp","About","menuFunc","className","onPointerEnter","Projects","createContext","App","activePage","setActivePage","pane","setPane","style","camera","onCreated","gl","shadowMap","enabled","type","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b5a3abd.chunk.js","sourcesContent":["import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { extend, useFrame, useThree } from '@react-three/fiber'\r\nimport { useRef } from 'react'\r\n\r\nextend({ OrbitControls })\r\n\r\nexport const Controls = () => {\r\n  const orbitRef = useRef();\r\n  const { camera, gl } = useThree();\r\n  useFrame((delta, state) => {\r\n    orbitRef.current.update();\r\n  })\r\n  return (\r\n    <orbitControls\r\n      maxPolarAngle={Math.PI}\r\n      minPolarAngle={Math.PI / 5}\r\n      ref={orbitRef}\r\n      args={[camera, gl.domElement]}\r\n    />\r\n  )\r\n}","import { animated } from '@react-spring/three'\r\nimport { Sphere } from './Sphere.js'\r\nimport React from 'react'\r\nimport * as THREE from 'three'\r\nimport {SphereContext} from '../App'\r\n\r\nconst spheres = []\r\nconst numSpheres = 5\r\nfor (let i = 0; i < Math.floor(numSpheres); i++) {\r\n    let color = new THREE.Color(Math.random(), Math.random(), Math.random());\r\n    spheres.push({ color: color, position: [-1.5, 0.5, 4 + (-i * 4)], key: i, start: false })\r\n}\r\nconst AnimatedSphere = animated(Sphere)\r\nexport const AnimatedSpheres = ({ menuFunctions }) => {\r\n    const riseValues = React.useContext(SphereContext);\r\n    console.log(riseValues);\r\n    return (menuFunctions?<>\r\n        {spheres.map((sphere, index) => {\r\n            return index < menuFunctions.length? <AnimatedSphere color={sphere.color} key={sphere.key} position={sphere.position} index={index} menuFunction={menuFunctions[index]} shouldRise={riseValues.values[index]}></AnimatedSphere> : null\r\n        })}\r\n    </> : null)\r\n}","import { useSpring, useSpringRef, a, } from '@react-spring/three'\r\nimport * as THREE from 'three'\r\nimport { useRef, useState, useEffect } from 'react'\r\nimport { useFrame } from '@react-three/fiber';\r\n\r\n\r\nexport const Sphere = ({ start, position, color, index, menuFunction, shouldRise }) => {\r\n    let zPositionOffset\r\n    const [rise, setRise] = useState()\r\n    const springRef = useSpringRef()\r\n    let tempVector = new THREE.Vector3();\r\n    const props = useSpring(\r\n        { yposition: rise ? 1.5 : position[1], color: color, config: { duration: 200 } }\r\n    )\r\n\r\n    const sphereRef = useRef();\r\n    useFrame(() => {\r\n        if (typeof zPositionOffset != \"number\") {\r\n            zPositionOffset = 0\r\n        }\r\n        //zPositionOffset += 0.05\r\n        sphereRef.current.position.z = position[2] + zPositionOffset\r\n        sphereRef.current.getWorldPosition(tempVector);\r\n        if (tempVector.z > 20) {\r\n            console.log('resettings')\r\n            zPositionOffset = -position[2] - 20;\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRise(shouldRise)\r\n    }, [shouldRise])\r\n\r\n    return (\r\n        <a.mesh\r\n            ref={sphereRef}\r\n            position-x={position[0]}\r\n            position-y={props.yposition}\r\n            //onPointerEnter={()=> {setRise(true)}}\r\n            //onPointerOut={() => {setRise(false)}}\r\n            onPointerDown={() => {menuFunction()}}\r\n            >\r\n            <sphereBufferGeometry attach=\"geometry\"></sphereBufferGeometry>\r\n            <a.meshPhysicalMaterial attach=\"material\" color={props.color}></a.meshPhysicalMaterial>\r\n        </a.mesh>\r\n    )\r\n}","import { Reflector } from '@react-three/drei'\r\n\r\nexport const Plane = () => {\r\n  /*\r\n  useEffect(() => {\r\n    cubeRenderTarget = new THREE.WebGLCubeRenderTarget(1024, { format: THREE.RGBFormat, generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter })\r\n    cubeGeom = new THREE.BoxGeometry(10, 0.1, 60);\r\n    mirrorCubeCamera = new THREE.CubeCamera(0.1, 5000, cubeRenderTarget);\r\n    // mirrorCubeCamera.renderTarget.minFilter = THREE.LinearMipMapLinearFilter;\r\n    scene.add(mirrorCubeCamera);\r\n    mirrorCubeMaterial = new THREE.MeshBasicMaterial({ envMap: cubeRenderTarget.texture });\r\n    mirrorCube = new THREE.Mesh(cubeGeom, mirrorCubeMaterial);\r\n    mirrorCube.position.set(0, -4, 0);\r\n    mirrorCubeCamera.position.set(mirrorCube.position.x, mirrorCube.position.y, mirrorCube.position.z);\r\n    scene.add(mirrorCube);\r\n  }, [])\r\n\r\n  useFrame(() => {\r\n    if (mirrorCube) {\r\n      console.log('updating cube')\r\n      mirrorCube.visible = false;\r\n      mirrorCubeCamera.updateCubeMap(gl, scene)\r\n      mirrorCube.visible = true;\r\n    }\r\n  })*/\r\n  return (\r\n    <mesh\r\n      position={[-1, -0.5, 2]}>\r\n      <Reflector resolution={2048} args={[10, 10]} mirror={1} mixStrength={0.8} rotation={[-Math.PI / 2, 0, Math.PI / 2]}>\r\n        {(Material, props) => <Material color=\"#a0a0a0\" metalness={0.5} normalScale={[1, 1]} {...props} />}\r\n      </Reflector>\r\n    </mesh >\r\n  )\r\n}\r\n\r\n","import { useFrame, useThree } from '@react-three/fiber'\r\nimport { useRef } from 'react'\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from '@react-three/drei'\r\n\r\nimport { AnimatedSpheres } from './AnimatedSpheres'\r\nimport { Plane } from './Plane'\r\n\r\nfunction Scene( {menuFunctions}) {\r\n    const group = useRef();\r\n    const rotationEuler = new THREE.Euler(0, Math.PI/2, 0);\r\n    const rotationQuaternion = new THREE.Quaternion(0, 0, 0, 0);\r\n    const { viewport } = useThree();\r\n\r\n    useFrame(({ mouse }) => {\r\n        const x = (mouse.x * viewport.width) / 100;\r\n        const y = (mouse.y * viewport.height) / 100;\r\n\r\n        rotationEuler.set(y, x, 0);\r\n        rotationQuaternion.setFromEuler(rotationEuler);\r\n\r\n        group.current.quaternion.slerp(rotationQuaternion, 0.1);\r\n    });\r\n    return <group ref={group}>\r\n        <pointLight position={[15, 15, 15]} />\r\n        <AnimatedSpheres menuFunctions={menuFunctions} />\r\n        <Plane />\r\n    </group>\r\n}\r\n\r\nexport default Scene;","import \"./about.css\"\r\n\r\nfunction About({menuFunc}){\r\n    return (<>\r\n    <div className={\"aboutTab navTab\"} onPointerEnter={() => {console.log('about enter');menuFunc()}}>About</div>\r\n    </>)\r\n}\r\n\r\nexport default About","import \"./projects.css\"\r\n\r\nfunction Projects({menuFunc}){\r\n    return (<>\r\n    <div className={\"projectsTab navTab\"} onPointerEnter={() => {console.log('projects enter');menuFunc()}}>Projects</div>\r\n    </>)\r\n}\r\n\r\nexport default Projects","import { Canvas, useThree, useFrame } from '@react-three/fiber'\r\nimport React, { useState, useRef } from 'react'\r\nimport * as THREE from \"three\"\r\nimport { Controls } from './Components/Controls.js'\r\nimport Scene from './Components/Scene.jsx'\r\nimport About from './Components/About.jsx'\r\nimport Projects from './Components/Projects.jsx'\r\nimport \"./styles.css\"\r\n\r\nconst SphereContext = React.createContext({ values: null })\r\n\r\nfunction App() {\r\n    const [activePage, setActivePage] = useState([0, 0, 0])\r\n    const [pane, setPane] = useState(false);\r\n    const menuFunctions = [function () {\r\n        setPane(true);\r\n        setActivePage([1, 0, 0])\r\n    }, function () {\r\n        setPane(true);\r\n        setActivePage([0, 1, 0])\r\n    }]\r\n    \r\n    return (<div style={{ width: \"100%\", height: \"100%\" }}>\r\n        <Canvas camera={{ position: [5, 5, -2] }}\r\n            onCreated={\r\n                ({ gl }) => {\r\n                    gl.shadowMap.enabled = true\r\n                    gl.shadowMap.type = THREE.VSMShadowMap\r\n                    \r\n                }}>\r\n            <SphereContext.Provider value={{values: activePage}}>\r\n                <Scene menuFunctions={menuFunctions} />\r\n            </SphereContext.Provider>\r\n            <ambientLight />\r\n            <directionalLight></directionalLight>\r\n        </Canvas>\r\n        <div className={\"navbar\"}  >\r\n            <Projects menuFunc={menuFunctions[0]}></Projects>\r\n            \r\n            <About menuFunc={menuFunctions[1]}></About>\r\n        </div>\r\n        <div className={(pane? \"infoPaneContainerExpanded\" : \"infoPaneContainer\")} >\r\n                {activePage[0]? <div className={\"projectsPane infoPane\"}>some info about projects</div>: null}\r\n                {activePage[1]? <div className={\"aboutPane infoPane\"}>some info about me</div>: null}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n//close pane: onPointerLeave={() => {(activePage[0] || activePage[1] || activePage[2]) && setActivePage([0,0,0]) }}\r\nexport {App, SphereContext};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}