{"version":3,"sources":["Components/Controls.js","Components/AnimatedSpheres.js","Components/Plane.js","Components/Sphere.js","App.js","index.js"],"names":["extend","OrbitControls","Controls","orbitRef","useRef","useThree","camera","gl","useFrame","delta","state","current","update","maxPolarAngle","Math","PI","minPolarAngle","ref","args","domElement","Plane","rotation","position","receiveShadow","attach","color","spheres","i","floor","THREE","random","push","key","start","AnimatedSphere","animated","index","useState","rise","setRise","props","useSpringRef","useSpring","yposition","config","duration","zPositionOffset","sphereRef","z","useEffect","setTimeout","mesh","meshPhysicalMaterial","AnimatedSpheres","sphereShouldRise","length","map","sphere","App","useControls","fogMin","fogMax","num","type","onClick","onCreated","shadowMap","enabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2b9b745.chunk.js","sourcesContent":["import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { extend, useFrame, useThree } from '@react-three/fiber'\nimport { useRef } from 'react'\n\nextend({ OrbitControls })\n\nexport const Controls = () => {\n  const orbitRef = useRef();\n  const { camera, gl } = useThree();\n  useFrame((delta, state) => {\n    orbitRef.current.update();\n  })\n  return (\n    <orbitControls\n      maxPolarAngle={Math.PI / 1}\n      minPolarAngle={Math.PI / 5}\n      ref={orbitRef}\n      args={[camera, gl.domElement]}\n    />\n  )\n}","import { extend, useFrame } from '@react-three/fiber'\nimport { useSpring, animated } from '@react-spring/three'\nimport { Sphere } from './Sphere.js'\nimport * as THREE from 'three'\n\nconst spheres = []\nconst numSpheres = 10\nfor (let i = 0; i < Math.floor(numSpheres); i++) {\n    let color = new THREE.Color(Math.random(), Math.random(), Math.random());\n    spheres.push({ color: color, position: [-1.5, 0.5, -2 * i], key: i, start: false })\n}\nconst AnimatedSphere = animated(Sphere)\nexport const AnimatedSpheres = ({rise}) => {\n    const { sphereShouldRise } = useSpring( {sphereShouldRise: rise? spheres.length : -1, config: {duration: 1000} })\n\n    return (<>\n        {spheres.map((sphere, index) => {\n                return <AnimatedSphere start={sphereShouldRise} color={sphere.color} key={sphere.key} position={sphere.position} index={index}></AnimatedSphere>\n        })}\n    </>)\n}","\n\n\nexport const Plane = () => {\n  return (\n    <mesh\n      rotation={[-Math.PI / 2, 0, 0]}\n      position={[0, -0.5, 0]}\n      receiveShadow>\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]}></planeBufferGeometry>\n      <meshPhysicalMaterial attach=\"material\" color={\"white\"}></meshPhysicalMaterial>\n    </mesh>\n  )\n}\n\n","import { useSpring, useSpringRef, a } from '@react-spring/three'\nimport { useRef, useState, useEffect } from 'react'\nimport { useFrame } from '@react-three/fiber';\n\nexport const Sphere = ({start, position, color, index}) => {\n    const [rise, setRise] = useState(false)\n    const springRef = useSpringRef()\n\n    const props = useSpring(\n         {yposition: rise?  2.5 :  position[1], color: color, config: {duration: 200}}\n    )\n\n    let zPositionOffset = 0;\n\n    const sphereRef = useRef();\n    useFrame(() => {\n        if(Math.floor(start) === index){\n            setRise(true)\n        } \n        zPositionOffset += 0.01\n        sphereRef.current.position.z = position[2] + zPositionOffset\n    })\n    useEffect(() => {\n        if(rise === true) {\n            setTimeout(() => {\n                setRise(false)\n            }, 500)\n        }\n    }, [rise])\n\n    return (\n        <a.mesh\n        ref={sphereRef}\n        position-x={position[0]}\n        position-y={props.yposition}\n        position-z={position[2]}>\n            <sphereBufferGeometry attach=\"geometry\"></sphereBufferGeometry>\n            <a.meshPhysicalMaterial attach=\"material\" color={props.color}></a.meshPhysicalMaterial>\n        </a.mesh>\n    )\n}","import { Canvas, extend, useThree, useFrame } from '@react-three/fiber'\nimport { useState, useEffect } from 'react'\nimport { useSpring, useChain, animated } from '@react-spring/three'\nimport { useControls } from 'leva'\nimport * as THREE from \"three\"\nimport { Controls } from './Components/Controls.js'\nimport { Plane } from './Components/Plane.js'\nimport { AnimatedSpheres } from './Components/AnimatedSpheres.js'\n\n\nfunction App() {\n    const [rise, setRise] = useState(false)\n    const { fogMin, fogMax, num } = useControls({ fogMin: 0, fogMax: 30, num: 1 })\n    \n    return ( <>\n    <button type=\"button\" onClick={() => setRise(!rise)}>toggle</button>\n    <Canvas camera = {{ position: [0, 0, 5] } }\n        onCreated = {\n            ({ gl }) => {\n                gl.shadowMap.enabled = true\n                gl.shadowMap.type = THREE.PCFSoftShadowMap\n                }}>\n        <fog attach=\"fog\" args={[\"white\", fogMin, fogMax]}/> \n        <Controls/> \n        <AnimatedSpheres rise={rise}/>\n        <Plane/>\n        <ambientLight/>\n        <directionalLight></directionalLight> \n        </Canvas>\n        </>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}